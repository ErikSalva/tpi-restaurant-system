openapi: 3.0.4
info:
  title: API de Pedidos de Restaurante
  version: 1.0.0
  description: API REST para gestión de pedidos, productos y autenticación de usuarios.
servers:
  - url: http://localhost:8000
    description: Servidor de desarrollo local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token JWT obtenido desde /auth/token"
  
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "admin@restaurante.com"
        password:
          type: string
          format: password
          example: "admin123"
      required: [email, password]
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        usuario:
          $ref: '#/components/schemas/Usuario'

    Producto:
      type: object
      properties:
        _id:
          type: string
          example: "67123a..."
        nombre:
          type: string
          example: "Hamburguesa Doble Cheddar"
        descripcion:
          type: string
          example: "Doble carne, doble cheddar, panceta."
        precio:
          type: number
          format: double
          example: 1500.50
        stock:
          type: integer
          example: 50
        disponible:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-10-25T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-25T14:35:00Z"
    CreateProductoInput:
      type: object
      properties:
        nombre:
          type: string
          example: "Hamburguesa Doble Cheddar"
        descripcion:
          type: string
          example: "Doble carne, doble cheddar, panceta."
        precio:
          type: number
          format: double
          example: 1500.50
        stock:
          type: integer
          example: 50
      required: [nombre, precio, stock]

    ItemEmbebido:
      description: "Representa un item DENTRO de un pedido (denormalizado)"
      type: object
      properties:
        productoId:
          type: string
          example: "67123a..."
        cantidad:
          type: integer
          example: 2
        nombreProducto:
          type: string
          example: "Hamburguesa Doble Cheddar"
        precioUnitario:
          type: number
          format: double
          example: 1500.50
    
    Pedido:
      type: object
      properties:
        _id:
          type: string
          example: "67123b..."
        usuarioId:
          type: string
          example: "67123f..."
        estado:
          type: string
          enum: [CONFIRMADO, EN_PREPARACION, LISTO, ENTREGADO]
          example: "EN_PREPARACION"
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemEmbebido'
        subtotal:
          type: number
          format: double
          example: 3001.00
        total:
          type: number
          format: double
          example: 3001.00
        createdAt:
          type: string
          format: date-time
          example: "2025-10-25T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-25T14:35:00Z"
    
    CreatePedidoInputItem:
      description: "Item enviado por el cliente para crear un pedido"
      type: object
      properties:
        productoId:
          type: string
          example: "67123a..."
        cantidad:
          type: integer
          minimum: 1
          example: 2
      required: [productoId, cantidad]
    
    CreatePedidoInput:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreatePedidoInputItem'
      required: [items]

    Usuario:
      type: object
      properties:
        _id:
          type: string
          example: "67123f..."
        email:
          type: string
          format: email
          example: "admin@restaurante.com"
        roles:
          type: array
          items:
            type: string
          example: ["ADMIN", "USER"]
        createdAt:
          type: string
          format: date-time
          example: "2025-10-25T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-25T14:35:00Z"
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Stock insuficiente para el producto X"

security:
  - bearerAuth: []

tags:
  - name: Autenticación
    description: Endpoints para obtener y verificar tokens JWT.
  - name: Productos
    description: "CRUD de la Entidad 1: Gestión del catálogo."
  - name: Pedidos
    description: "CRUD de la Entidad 2: Gestión de pedidos (incluye la transacción)."
  - name: Sistema
    description: Endpoints de monitoreo (health check).

paths:
  /health:
    get:
      summary: Verifica el estado del servicio
      tags: [Sistema]
      security: [] 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
  
  /auth/token:
    post:
      summary: Obtener un token JWT
      description: Envía credenciales (email/password) para obtener un token JWT.
      tags: [Autenticación]
      security: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example: 
              email: "admin@restaurante.com"
              password: "admin123"
      responses:
        '200':
          description: Token JWT y datos de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /productos:
    get:
      summary: Listar productos del catálogo
      tags: [Productos]
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
    post:
      summary: Crear un nuevo producto (Admin)
      tags: [Productos]
      security:
        - bearerAuth: ["ADMIN"] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductoInput'
            example: 
              nombre: "Papas Fritas"
              descripcion: "Con cheddar y panceta"
              precio: 700.00
              stock: 100
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Prohibido (No es Admin)

  /productos/{id}:
    get:
      summary: Obtener un producto por ID
      tags: [Productos]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "67123a..."
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        '404':
          description: No encontrado
          
  /pedidos:
    get:
      summary: Listar mis pedidos
      description: Devuelve la lista de pedidos del usuario autenticado (via JWT).
      tags: [Pedidos]
      responses:
        '200':
          description: Lista de pedidos del usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'
    
    post:
      summary: "Crear un nuevo pedido"
      description: "Crea un nuevo pedido, ejecuta la transacción de stock y publica el evento de creación."
      tags: [Pedidos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePedidoInput'
            example: 
              items:
                - productoId: "67123a..."
                  cantidad: 1
                - productoId: "67123c..." 
                  cantidad: 2
      responses:
        '201':
          description: Pedido creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
              example: 
                _id: "67123b..."
                usuarioId: "67123f..."
                estado: "CONFIRMADO"
                items:
                  - productoId: "67123a..."
                    cantidad: 1
                    nombreProducto: "Hamburguesa Doble Cheddar"
                    precioUnitario: 1500.50
                  - productoId: "67123c..."
                    cantidad: 2
                    nombreProducto: "Papas Fritas"
                    precioUnitario: 700.00
                subtotal: 2900.50
                total: 2900.50
                createdAt: "2025-10-25T14:30:00Z"
                updatedAt: "2025-10-25T14:30:00Z"
        '400':
          description: "Error de negocio (ej. Stock insuficiente)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /pedidos/{id}:
    get:
      summary: Obtener un pedido por ID
      description: "Obtiene un pedido, verificando que pertenezca al usuario."
      tags: [Pedidos]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "67123b..."
      responses:
        '200':
          description: Pedido encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        '404':
          description: No encontrado